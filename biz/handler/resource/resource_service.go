// Code generated by hertz generator.

package resource

import (
	resource "LearnShare/biz/model/resource"
	"LearnShare/biz/pack"
	"LearnShare/biz/service"
	"LearnShare/pkg/errno"
	"context"
	"strconv"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// SearchResources .
// @router /api/resources/search [GET]
func SearchResources(ctx context.Context, c *app.RequestContext) {
	var err error
	var req resource.SearchResourceReq
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.BuildFailResponse(c, err)
		return
	}

	resp := new(resource.SearchResourceResp)

	// Call service
	moduleResources, total, err := service.NewSearchResourcesService(ctx).SearchResources(&req)
	if err != nil {
		pack.BuildFailResponse(c, err)
		return
	}

	// Build response
	resp.BaseResp = pack.BuildBaseResp(errno.Success)
	resp.Resources = moduleResources
	resp.Total = int32(total)

	c.JSON(consts.StatusOK, resp)
}

// UploadResource .
// @router /api/resources [POST]
func UploadResource(ctx context.Context, c *app.RequestContext) {
	var err error
	var req resource.UploadResourceReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(resource.UploadResourceResp)

	c.JSON(consts.StatusOK, resp)
}

// DownloadResource .
// @router /api/resources/{resource_id}/download [GET]
func DownloadResource(ctx context.Context, c *app.RequestContext) {
	var err error
	var req resource.DownloadResourceReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(resource.DownloadResourceResp)

	c.JSON(consts.StatusOK, resp)
}

// ReportResource .
// @router /api/resources/{resource_id}/report [POST]
func ReportResource(ctx context.Context, c *app.RequestContext) {
	var err error
	var req resource.ReportResourceReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(resource.ReportResourceResp)

	c.JSON(consts.StatusOK, resp)
}

// GetResource .
// @router /api/resources/{resource_id} [GET]
func GetResource(ctx context.Context, c *app.RequestContext) {
	var err error
	var req resource.GetResourceReq
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.BuildFailResponse(c, err)
		return
	}

	resp := new(resource.GetResourceResp)

	// Call service
	resource, err := service.NewGetResourceService(ctx).GetResource(&req)
	if err != nil {
		pack.BuildFailResponse(c, err)
		return
	}

	// Build response
	resp.BaseResp = pack.BuildBaseResp(errno.Success)
	resp.Resource = resource

	c.JSON(consts.StatusOK, resp)
}

// SubmitResourceRating .
// @router /api/resource_ratings/{rating_id} [POST]
func SubmitResourceRating(ctx context.Context, c *app.RequestContext) {
	var err error
	var req resource.SubmitResourceRatingReq

	// 从路径参数获取rating_id
	ratingIDStr := c.Param("rating_id")
	ratingID, err := strconv.ParseInt(ratingIDStr, 10, 64)
	if err != nil {
		pack.BuildFailResponse(c, errno.ParamVerifyError)
		return
	}

	// 绑定请求体参数
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.BuildFailResponse(c, err)
		return
	}

	// 设置rating_id到请求结构体
	req.RatingId = ratingID

	resp := new(resource.SubmitResourceRatingResp)

	// 获取当前用户ID
	userID, exists := c.Get("user_id")
	if !exists {
		pack.BuildFailResponse(c, errno.AuthInvalid)
		return
	}

	// Call service
	_, err = service.NewSubmitResourceRatingService(ctx).SubmitResourceRating(&req, userID.(int64))
	if err != nil {
		pack.BuildFailResponse(c, err)
		return
	}

	// Build response
	resp.BaseResp = pack.BuildBaseResp(errno.Success)

	c.JSON(consts.StatusOK, resp)
}

// DeleteResourceRating .
// @router /api/resource_ratings/{rating_id} [DELETE]
func DeleteResourceRating(ctx context.Context, c *app.RequestContext) {
	var err error
	var req resource.DeleteResourceRatingReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(resource.DeleteResourceRatingResp)

	c.JSON(consts.StatusOK, resp)
}

// SubmitResourceComment .
// @router /api/resource_comments/{comment_id} [POST]
func SubmitResourceComment(ctx context.Context, c *app.RequestContext) {
	var err error
	var req resource.SubmitResourceCommentReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(resource.SubmitResourceCommentResp)

	c.JSON(consts.StatusOK, resp)
}

// DeleteResourceComment .
// @router /api/resources_comments/{comment_id} [DELETE]
func DeleteResourceComment(ctx context.Context, c *app.RequestContext) {
	var err error
	var req resource.DeleteResourceCommentReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(resource.DeleteResourceCommentResp)

	c.JSON(consts.StatusOK, resp)
}

// GetResourceComments .
// @router /api/resource/{resource_id}/comment [GET]
func GetResourceComments(ctx context.Context, c *app.RequestContext) {
	var err error
	var req resource.GetResourceCommentsReq
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.BuildFailResponse(c, err)
		return
	}

	resp := new(resource.GetResourceCommentsResp)

	// Call service
	comments, total, err := service.NewGetResourceCommentsService(ctx).GetResourceComments(&req)
	if err != nil {
		pack.BuildFailResponse(c, err)
		return
	}

	// Build response
	resp.BaseResp = pack.BuildBaseResp(errno.Success)
	resp.Comments = comments
	resp.Total = int32(total)

	c.JSON(consts.StatusOK, resp)
}
