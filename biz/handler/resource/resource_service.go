// Code generated by hertz generator.

package resource

import (
	"context"

	resource "LearnShare/biz/model/resource"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// SearchResources .
// @router /api/resources/search [GET]
func SearchResources(ctx context.Context, c *app.RequestContext) {
	var err error
	var req resource.SearchResourceReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(resource.SearchResourceResp)

	c.JSON(consts.StatusOK, resp)
}

// UploadResource .
// @router /api/resources [POST]
func UploadResource(ctx context.Context, c *app.RequestContext) {
	var err error
	var req resource.UploadResourceReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(resource.UploadResourceResp)

	c.JSON(consts.StatusOK, resp)
}

// DownloadResource .
// @router /api/resources/{resource_id}/download [GET]
func DownloadResource(ctx context.Context, c *app.RequestContext) {
	var err error
	var req resource.DownloadResourceReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(resource.DownloadResourceResp)

	c.JSON(consts.StatusOK, resp)
}

// ReportResource .
// @router /api/resources/{resource_id}/report [POST]
func ReportResource(ctx context.Context, c *app.RequestContext) {
	var err error
	var req resource.ReportResourceReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(resource.ReportResourceResp)

	c.JSON(consts.StatusOK, resp)
}

// GetResource .
// @router /api/resources/{resource_id} [GET]
func GetResource(ctx context.Context, c *app.RequestContext) {
	var err error
	var req resource.GetResourceReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(resource.GetResourceResp)

	c.JSON(consts.StatusOK, resp)
}
