// Code generated by hertz generator.

package user

import (
	"context"

	user "LearnShare/biz/model/user"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// Register .
// @router /api/auth/register [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.RegisterReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.RegisterResp)

	c.JSON(consts.StatusOK, resp)
}

// LoginIn .
// @router /api/auth/login [POST]
func LoginIn(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.LoginInReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.LoginInResp)

	c.JSON(consts.StatusOK, resp)
}

// LoginOut .
// @router /api/auth/logout [POST]
func LoginOut(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.LoginOutReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.LoginOutResp)

	c.JSON(consts.StatusOK, resp)
}

// SendVerifyEmail .
// @router /api/users/me/email/get [POST]
func SendVerifyEmail(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.SendVerifyEmailReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.SendVerifyEmailResp)

	c.JSON(consts.StatusOK, resp)
}

// VerifyEmail .
// @router /api/users/me/email/verify [POST]
func VerifyEmail(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.VerifyEmailReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.VerifyEmailResp)

	c.JSON(consts.StatusOK, resp)
}

// UpdateEmail .
// @router /api/users/me/email [PUT]
func UpdateEmail(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UpdateEmailReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.UpdateEmailResp)

	c.JSON(consts.StatusOK, resp)
}

// UpdatePassword .
// @router /api/users/me/password [PUT]
func UpdatePassword(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UpdatePasswordReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.UpdatePasswordResp)

	c.JSON(consts.StatusOK, resp)
}

// UpdateMajor .
// @router /api/users/me/major [PUT]
func UpdateMajor(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UpdateMajorReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.UpdateMajorResp)

	c.JSON(consts.StatusOK, resp)
}

// UploadAvatar .
// @router /api/users/avatar [PUT]
func UploadAvatar(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UploadAvatarReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.UploadAvatarResp)

	c.JSON(consts.StatusOK, resp)
}

// ResetPassword .
// @router /api/users/me/password/reset [POST]
func ResetPassword(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.ResetPasswordReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.ResetPasswordResp)

	c.JSON(consts.StatusOK, resp)
}

// RefreshToken .
// @router /api/auth/refresh [POST]
func RefreshToken(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.RefreshTokenReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.RefreshTokenResp)

	c.JSON(consts.StatusOK, resp)
}

// GetUserInfo .
// @router /api/users/{user_id} [GET]
func GetUserInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.GetUserInfoReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(user.GetUserInfoResp)

	c.JSON(consts.StatusOK, resp)
}
