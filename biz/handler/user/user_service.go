// Code generated by hertz generator.

package user

import (
	"LearnShare/biz/middleware"
	"LearnShare/biz/pack"
	"LearnShare/biz/service"
	"context"

	"LearnShare/biz/model/user"
	"LearnShare/pkg/errno"

	"github.com/cloudwego/hertz/pkg/app"
)

// Register .
// @router /api/auth/register [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.RegisterReq
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.BuildFailResponse(c, err)
		return
	}

	resp := new(user.RegisterResp)

	err = service.NewUserService(ctx, c).Register(&req)
	if err != nil {
		pack.BuildFailResponse(c, err)
		return
	}

	pack.SendResponse(c, resp)
}

// LoginIn .
// @router /api/auth/login [POST]
func LoginIn(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.LoginInReq
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.BuildFailResponse(c, err)
		return
	}

	userInfo, err := service.NewUserService(ctx, c).LoginIn(&req)
	if err != nil {
		pack.BuildFailResponse(c, err)
		return
	}

	resp := &user.LoginInResp{
		BaseResponse: pack.BuildBaseResp(errno.Success),
		User:         userInfo,
	}

	pack.SendResponse(c, resp)
}

// LoginOut .
// @router /api/auth/logout [POST]
func LoginOut(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.LoginOutReq
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.BuildFailResponse(c, err)
		return
	}

	resp := new(user.LoginOutResp)

	pack.SendResponse(c, resp)
}

// SendVerifyEmail .
// @router /api/users/me/email/get [POST]
func SendVerifyEmail(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.SendVerifyEmailReq
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.BuildFailResponse(c, err)
		return
	}

	resp := new(user.SendVerifyEmailResp)

	pack.SendResponse(c, resp)
}

// VerifyEmail .
// @router /api/users/me/email/verify [POST]
func VerifyEmail(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.VerifyEmailReq
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.BuildFailResponse(c, err)
		return
	}

	resp := new(user.VerifyEmailResp)

	pack.SendResponse(c, resp)
}

// UpdateEmail .
// @router /api/users/me/email [PUT]
func UpdateEmail(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UpdateEmailReq
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.BuildFailResponse(c, err)
		return
	}

	resp := new(user.UpdateEmailResp)

	pack.SendResponse(c, resp)
}

// UpdatePassword .
// @router /api/users/me/password [PUT]
func UpdatePassword(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UpdatePasswordReq
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.BuildFailResponse(c, err)
		return
	}

	resp := new(user.UpdatePasswordResp)
	err = service.NewUserService(ctx, c).UpdatePassword(&req)
	if err != nil {
		pack.BuildFailResponse(c, err)
		return
	}

	pack.SendResponse(c, resp)
}

// UpdateMajor .
// @router /api/users/me/major [PUT]
func UpdateMajor(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UpdateMajorReq
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.BuildFailResponse(c, err)
		return
	}

	resp := new(user.UpdateMajorResp)
	err = service.NewUserService(ctx, c).UpdateMajor(&req)
	if err != nil {
		pack.BuildFailResponse(c, err)
		return
	}

	pack.SendResponse(c, resp)
}

// UploadAvatar .
// @router /api/users/avatar [PUT]
func UploadAvatar(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UploadAvatarReq
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.BuildFailResponse(c, err)
		return
	}

	resp := new(user.UploadAvatarResp)

	pack.SendResponse(c, resp)
}

// ResetPassword .
// @router /api/users/me/password/reset [POST]
func ResetPassword(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.ResetPasswordReq
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.BuildFailResponse(c, err)
		return
	}

	resp := new(user.ResetPasswordResp)

	pack.SendResponse(c, resp)
}

// RefreshToken .
// @router /api/auth/refresh [POST]
func RefreshToken(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.RefreshTokenReq
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.BuildFailResponse(c, err)
		return
	}

	resp := new(user.RefreshTokenResp)
	middleware.GenerateAccessToken(c)
	resp.BaseResponse = pack.BuildBaseResp(errno.Success)
	pack.SendResponse(c, resp)
}

// GetUserInfo .
// @router /api/users/{user_id} [GET]
func GetUserInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.GetUserInfoReq
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.BuildFailResponse(c, err)
		return
	}

	resp := new(user.GetUserInfoResp)
	userInfo, err := service.NewUserService(ctx, c).GetUserInfo(&req)
	if err != nil {
		pack.BuildFailResponse(c, err)
		return
	}
	resp.BaseResponse = pack.BuildBaseResp(errno.Success)
	resp.User = userInfo

	pack.SendResponse(c, resp)
}
