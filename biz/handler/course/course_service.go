// Code generated by hertz generator.

package course

import (
	"context"

	course "LearnShare/biz/model/course"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// Search .
// @router /api/courses/search [GET]
func Search(ctx context.Context, c *app.RequestContext) {
	var err error
	var req course.SearchReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(course.SearchResp)

	c.JSON(consts.StatusOK, resp)
}

// GetCourseDetail .
// @router /api/courses/{course_id} [GET]
func GetCourseDetail(ctx context.Context, c *app.RequestContext) {
	var err error
	var req course.GetCourseDetailReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(course.GetCourseDetailResp)

	c.JSON(consts.StatusOK, resp)
}

// GetCourseResourceList .
// @router /api/courses/{course_id}/resources [GET]
func GetCourseResourceList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req course.GetCourseResourceListReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(course.GetCourseResourceListResp)

	c.JSON(consts.StatusOK, resp)
}

// GetCourseComments .
// @router /api/courses/{course_id}/comments [GET]
func GetCourseComments(ctx context.Context, c *app.RequestContext) {
	var err error
	var req course.GetCourseCommentsReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(course.GetCourseCommentsResp)

	c.JSON(consts.StatusOK, resp)
}

// SubmitCourseRating .
// @router /api/course_ratings/{rating_id} [POST]
func SubmitCourseRating(ctx context.Context, c *app.RequestContext) {
	var err error
	var req course.SubmitCourseRatingReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(course.SubmitCourseRatingResp)

	c.JSON(consts.StatusOK, resp)
}

// SubmitCourseComment .
// @router /api/courses/{course_id}/comments [POST]
func SubmitCourseComment(ctx context.Context, c *app.RequestContext) {
	var err error
	var req course.SubmitCourseCommentReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(course.SubmitCourseCommentResp)

	c.JSON(consts.StatusOK, resp)
}

// DeleteCourseComment .
// @router /api/courses_comments/{comment_id} [DELETE]
func DeleteCourseComment(ctx context.Context, c *app.RequestContext) {
	var err error
	var req course.DeleteCourseCommentReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(course.DeleteCourseCommentResp)

	c.JSON(consts.StatusOK, resp)
}

// DeleteCourseRating .
// @router /api/course_ratings/{rating_id} [DELETE]
func DeleteCourseRating(ctx context.Context, c *app.RequestContext) {
	var err error
	var req course.DeleteCourseRatingReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(course.DeleteCourseRatingResp)

	c.JSON(consts.StatusOK, resp)
}
